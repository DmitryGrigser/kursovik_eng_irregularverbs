#include <iostream>
#include <cstring>

using namespace std;

struct verb {// —Å–æ—Å—Ç–∞–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
char Infinitive[50]; 
char PastIndefinite[50]; 
char dop[50];
char ParticipleII[50]; 
char Translation[50];
}v1;

void find(char *);

main(){
	cout << "positive test(inf + translation)" << endl;
	char buff1[] = "to be";//ÔÓÁËÚË‚Ì˚È 
	cout << buff1 << endl;
	find(buff1);
	char buff2[] = "was";//ÔÓÁËÚË‚Ì˚È 
	cout << buff2 << endl;
	find(buff2);
	char buff3[] = "were";//ÔÓÁËÚË‚Ì˚È 
	cout << buff3 << endl;
	find(buff3);
	char buff4[] = "been";//ÔÓÁËÚË‚Ì˚È 
	cout << buff4 << endl;
	find(buff4);
	cout << "negative test(error)" << endl;
	char buff5[] = "@1qW4";//ÌÂ„‡ÚË‚Ì˚È
	cout << buff5 << endl;
	find(buff5);
}

void find(char *buff){
	FILE *text;
	text = fopen("new.dat", "rb");//–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞(–ë–î)
	fread(&v1,sizeof(v1),1,text);//—á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
	while(!feof(text)){ //–ø–æ–∫–∞ —Ñ–∞–π–ª –Ω–µ –∫–æ–Ω—á–∏–ª—Å—è
		if(strcmp(v1.Infinitive,buff) == 0){ //–ø–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–æ–¥–µ–Ω–∏—è
			cout <<"Verb: " << v1.Infinitive << " \nTranslation: " << v1.Translation  << endl;
			system("pause");
			break;
		}
		if(strcmp(v1.PastIndefinite,buff) == 0){ //–ø–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–æ–¥–µ–Ω–∏—è
			cout <<"Verb: " << v1.Infinitive << " \nTranslation: " << v1.Translation  << endl;
			system("pause");
			break;
		}
		if(strcmp(v1.dop,buff) == 0){ //–ø–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–æ–¥–µ–Ω–∏—è
			cout <<"Verb: " << v1.Infinitive << " \nTranslation: " << v1.Translation  << endl;
			system("pause");
			break;
		}
		if(strcmp(v1.ParticipleII,buff) == 0){ //–ø–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–æ–¥–µ–Ω–∏—è
			cout <<"Verb: " << v1.Infinitive << " \nTranslation: " << v1.Translation  << endl;
			system("pause");
			break;
		}
		fread(&v1,sizeof(v1),1,text);//—á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏(—Å–ª–µ–¥.)
	}
	if(feof(text)){ // –µ—Å–ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ü–∏–ª—Å—è —Ç–æ...
	cout << "The verb is not found" << endl;
	system("pause");
	}
}
